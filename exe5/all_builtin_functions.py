def test_builtin_functions():
    print("Test abs() function")
    negative = -5
    print("The absolute value of " + str(negative) + " is: " + str(abs(negative)))

    print("Test all() function")
    #all()
    print("Test () function")#any()
    print("Test () function")#basestring()
    print("Test () function")#bin()
    print("Test () function")#bool()
    print("Test () function")#bytearray()
    print("Test () function")#callable()
    print("Test () function")#chr()
    print("Test () function")#classmethod()
    print("Test () function")#cmp()
    print("Test () function")#compile()
    print("Test () function")#complex()
    print("Test () function")#delattr()
    print("Test () function")#dict()
    print("Test () function")#dir()
    print("Test () function")#divmod()
    print("Test () function")#enumerate()
    print("Test () function")#eval()
    print("Test () function")#execfile()
    print("Test () function")#file()
    print("Test () function")#filter()
    print("Test () function")#float()
    print("Test () function")#format()
    print("Test () function")#frozenset()
    print("Test () function")#getattr()
    print("Test () function")#globals()
    print("Test () function")#hasattr()
    print("Test () function")#hash()
    print("Test () function")#help()
    print("Test () function")#hex()
    print("Test () function")#id()
    print("Test () function")#input()
    print("Test () function")#int()
    print("Test () function")#isinstance()
    print("Test () function")#issubclass()
    print("Test () function")#iter()
    print("Test () function")#len()
    print("Test () function")#list()
    print("Test () function")#locals()
    print("Test () function")#long()
    print("Test () function")#map()
    print("Test () function")#max()
    print("Test () function")#memoryview()
    print("Test () function")#min()
    print("Test () function")#next()
    print("Test () function")#object()
    print("Test () function")#oct()
    print("Test () function")#open()
    print("Test () function")#ord()
    print("Test () function")#pow()
    print("Test () function")#print()
    print("Test () function")#property()
    print("Test () function")#range()
    print("Test () function")#raw_input()
    print("Test () function")#reduce()
    print("Test () function")#reload()
    print("Test () function")#repr()
    print("Test () function")#reversed()
    print("Test () function")#round()
    print("Test () function")#set()
    print("Test () function")#setattr()
    print("Test () function")#slice()
    print("Test () function")#sorted()
    print("Test () function")#staticmethod()
    print("Test () function")#str()
    print("Test () function")#sum()
    print("Test () function")#super()
    print("Test () function")#tuple()
    print("Test () function")#type()
    print("Test () function")#unichr()
    print("Test () function")#unicode()
    print("Test () function")#vars()
    print("Test () function")#xrange()
    print("Test () function")#zip()
    print("Test () function")#__import__()
test_builtin_functions()